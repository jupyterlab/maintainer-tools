[build-system]
requires = ["hatchling>=1.5", "hatch-nodejs-version"]
build-backend = "hatchling.build"

[project]
name = "foobar"
authors = [{name = "Sir Robin", email = "robin@camelot.uk"}]
dynamic = ["description", "version"]
readme = "README.md"
dependencies = ["jupyter_core>=4.12,!=5.0.*"]

[project.optional-dependencies]
test = ["pytest>=7.0"]

[tool.jupyter-releaser]
skip = ["publish-assets"]
hooks.after-populate-release = ["bash ./.github/scripts/bump_tag.sh"]

[tool.hatch.version]
source = "nodejs"

[tool.hatch.envs.default.scripts]
check_minimum = "python -c 'from jupyter_core import __version__; assert __version__ == \"4.12.0\"'"
check_pre = "python -c 'import os; assert os.environ[\"PIP_PRE\"] == \"1\"'"

[tool.hatch.envs.typing]
features = ["test"]
dependencies = ["mypy>=0.990"]
[tool.hatch.envs.typing.scripts]
test = "mypy --install-types --non-interactive {args:.}"

[tool.hatch.envs.lint]
dependencies = ["black==23.1.0", "mdformat>0.7", "ruff==0.0.270"]
detached = true
[tool.hatch.envs.lint.scripts]
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
  "mdformat --check {args:*.md}"
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "mdformat {args:*.md}"
]

[tool.pytest.ini_options]
testpaths = ["foobar.py"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
explicit_package_bases = true
namespace_packages = true
no_implicit_optional = true
no_implicit_reexport = true
pretty = true
show_error_context = true
show_error_codes = true
strict_equality = true
strict_optional = true
warn_unused_configs = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ["py38"]

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
  "A", "B", "C", "DTZ", "E", "EM", "F", "FBT", "I", "ICN", "ISC", "N",
  "PLC", "PLE", "PLR", "PLW", "Q", "RUF", "S", "SIM", "T", "TID", "UP",
  "W", "YTT",
]
ignore = [
  # Q000 Single quotes found but double quotes preferred
  "Q000",
  # FBT001 Boolean positional arg in function definition
  "FBT001", "FBT002", "FBT003",
  # E501 Line too long (158 > 100 characters)
  "E501",
  # SIM105 Use `contextlib.suppress(...)`
  "SIM105",
  # T201 `print` found
  "T201",
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch noqa lines
  "RUF100",
]

[tool.coverage.run]
relative_files = true
source = ["foobar"]
