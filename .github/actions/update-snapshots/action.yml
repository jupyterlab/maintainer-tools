name: Update playwright snapshots on PR
description: |
  Update the playwright snapshots on PR by pushing a commit (and upload them as artifact).
  The remote repository containing the PR branch must be checked out
  using `https`. If you are using the GitHub `hub` CLI, you can
  achieve that using `git config --global hub.protocol https`

inputs:
  # Mandatory inputs
  github_token:
    description: "The GitHub token to use, must have pull_request:write access"
    required: true
  test_folder:
    description: The folder defining the playwright tests
    required: true

  # Optional inputs
  server_url:
    description: The server URL to wait for (see https://github.com/iFaxity/wait-on-action `resource`)
    required: false
    default: http-get://localhost:8888
  artifact_name:
    description: The uploaded artifact name
    required: false
    default: playwright-snapshots
  browser:
    description: The playwright browser to install (one of [`chromium`, `firefox`, `webkit`])
    required: false
    default: chromium
  continue_on_error:
    description: Whether to continue on error when updating snapshots or not.
    required: false
    default: true
  dry_run:
    description: Whether this is a dry run (one of [`yes`, `no`])
    required: false
    default: no
  git_username:
    description: The Git Username to Use for the Commit
    required: false
    default: github-actions[bot]
  git_email:
    description: The Git Email to Use for the Commit
    required: false
    default: github-actions[bot]@users.noreply.github.com
  start_server_script:
    description: The yarn script to execute to start the server; set it to `null` if Playwright is handling it.
    required: false
    default: start
  update_script:
    description: The yarn script to execute to update the snapshots
    required: false
    default: test:update

runs:
  using: composite
  steps:
    - name: Start the server
      if: ${{ inputs.start_server_script != 'null' }}
      working-directory: ${{ inputs.test_folder }}
      shell: bash -l {0}
      run: (yarn run ${{ inputs.start_server_script }} 1>/tmp/snapshots-update-server.log 2>&1) &

    - name: Setup integration tests
      shell: bash -l {0}
      working-directory: ${{ inputs.test_folder }}
      run: |
        yarn install
        yarn run playwright install ${{ inputs.chromium }}

    - name: Wait for the server
      if: ${{ inputs.start_server_script != 'null' }}
      uses: ifaxity/wait-on-action@v1
      with:
        resource: ${{ inputs.server_url }}
        timeout: 360000

    - name: Generate new snapshots
      # Get as much update as possible
      continue-on-error: ${{ inputs.continue_on_error }}
      shell: bash -l {0}
      working-directory: ${{ inputs.test_folder }}
      run: yarn run ${{ inputs.update_script }}

    - name: Compress snapshots
      if: ${{ runner.os == 'Linux' }}
      shell: bash -l {0}
      working-directory: ${{ inputs.test_folder }}
      run: |
        sudo apt install optipng
        # Apply compression only on new and modified versioned files
        # - this does not filter out deleted files but it should not happen.
        echo "::group::Optimize PNG files"
        git ls-files --exclude-standard -om | grep -e "\.png$" | xargs optipng
        echo "::endgroup::"

    - name: Upload snapshots as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.test_folder }}/**/*-snapshots/*.*

    - name: Commit new snapshots
      shell: bash -l {0}
      working-directory: ${{ inputs.test_folder }}
      run: |
        git config user.name '${{ inputs.git_username }}'
        git config user.email '${{ inputs.git_email }}'

        git pull --no-tags
        git add ./*-snapshots/*.*
        git commit -m "Update Playwright Snapshots"
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Push new snapshots
      if: ${{ inputs.dry_run != 'yes' }}
      shell: bash -l {0}
      working-directory: ${{ inputs.test_folder }}
      run: |
        git config push.default upstream

        git push
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Server log
      if: ${{ inputs.start_server_script != 'null' && always() }}
      shell: bash -l {0}
      run: |
        echo "::group::Server log"
        cat /tmp/snapshots-update-server.log
        echo "::endgroup::"
