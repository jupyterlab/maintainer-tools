name: "Base Setup"
description: "Base Setup Actions Used Across Workflows"
inputs:
  python_version:
    description: "The python version"
  node_version:
    description: "The node version"
  dependency_type:
    default: "standard"
    description: "The dependency installation type: standard, pre, minimum"
runs:
  using: "composite"
  steps:
    - name: Set up environment
      shell: bash
      run: |
        PYTHON_VERSION="${{ inputs.python_version || matrix.python-version }}"
        NODE_VERSION=${{ inputs.node_version || matrix.node-version || '16.x' }}
        DEPENDENCY_TYPE=${{ inputs.dependency_type }}

        # Handle default python value based on dependency type.
        if [ $DEPENDENCY_TYPE == "pre" ]; then
          DEFAULT_PYTHON="3.11"
        else if [ $DEPENDENCY_TYPE == "minimum" ]; then
          DEFAULT_PYTHON="3.8"
        else:
          DEFAULT_PYTHON="3.10"
        fi
        echo "DEFAULT_PYTHON is $DEFAULT_PYTHON"
        PYTHON_VERSION=${PYTHON_VERSION:-$DEFAULT_PYTHON}

        echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
        echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
        echo "CACHE_PREFIX=${{ runner.os }}-${{ github.workflow}}-${{ github.job }}" >> $GITHUB_ENV
        echo "DEPENDENCY_TYPE=$DEPENDENCY_TYPE" >> $GITHUB_ENV

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          **/setup.cfg
          **/setup.py
          **/pyproject.toml
          **/requirements*.txt

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Cache checked links
      if: ${{ matrix.group == 'link_check' }}
      uses: actions/cache@v3
      with:
        path: ~/.cache/pytest-link-check
        key: ${{ env.CACHE_PREFIX }}-linkcheck-${{ hashFiles('**/*.md', '**/*.rst') }}-links
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-linkcheck-

    - name: Cache conda
      uses: actions/cache@v3
      with:
        path: ~/conda_pkgs_dir
        key: ${{ env.CACHE_PREFIX  }}-conda-${{ env.CACHE_NUMBER }}-${{
          hashFiles('**/environment*.yml') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-conda-

    - name: Enable long paths on Windows
      if: startsWith(runner.os, 'Windows')
      run: Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem -Name LongPathsEnabled -Value 1
      shell: pwsh

    - name: Upgrade packaging dependencies
      shell: bash
      run: |
        echo "::group::Upgrade packaging dependencies"
        python -m pip install --upgrade pip setuptools wheel pytest-github-actions-annotate-failures
        pipx install hatch
        echo "::endgroup::"

    - name: Handle dependency type
      shell: bash
      run: |
        if [ $DEPENDENCY_TYPE == 'pre'}} ]; then
          echo "PIP_PRE=1" >> $GITHUB_ENV
        else if [ $DEPENDENCY_TYPE == 'minimum'}} ]; then
          source ${{ github.action_path }}/setup_constraints.sh
        fi

    - name: Print Diagnostics
      shell: bash
      run: |
        set -x
        echo "::group::env"
        env
        echo "::endgroup::"
        pip debug
        yarn --version
        node --version
