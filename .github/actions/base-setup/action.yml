name: "Base Setup"
description: "Base Setup Actions Used Across Workflows"
inputs:
  python_version:
    description: "The python version"
  node_version:
    description: "The node version"
  dependency_type:
    default: "standard"
    description: "The dependency installation type: standard, pre, minimum"
runs:
  using: "composite"
  steps:
    - name: Set up environment
      shell: bash
      run: |
        set -eux
        PYTHON_VERSION="${{ inputs.python_version || matrix.python-version }}"
        NODE_VERSION=${{ inputs.node_version || matrix.node-version || '20.x' }}
        DEPENDENCY_TYPE=${{ inputs.dependency_type }}

        # Handle default python value based on dependency type.
        if [ $DEPENDENCY_TYPE == "pre" ]; then
          DEFAULT_PYTHON="3.11"
        elif [ $DEPENDENCY_TYPE == "minimum" ]; then
          DEFAULT_PYTHON="3.8"
        elif [ $DEPENDENCY_TYPE != "standard" ]; then
          echo "Unrecognized dependency type $DEPENDENCY_TYPE"
          exit 1
        else
          DEFAULT_PYTHON="3.11"
        fi

        echo "DEFAULT_PYTHON is $DEFAULT_PYTHON"
        PYTHON_VERSION="${PYTHON_VERSION:-$DEFAULT_PYTHON}"

        echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
        echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
        echo "CACHE_PREFIX=${{ runner.os }}-${{ github.workflow}}-${{ github.job }}" >> $GITHUB_ENV
        echo "DEPENDENCY_TYPE=$DEPENDENCY_TYPE" >> $GITHUB_ENV

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        allow-prereleases: true

    # Cache pip
    # We cannot use the builtin cache because it errors out with the files
    # are not present.
    - name: Get pip cache dir
      id: pip-cache
      shell: bash
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ env.CACHE_PREFIX }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.cfg', 'setup.py', '**/requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-pip-${{ env.PYTHON_VERSION }}

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Cache yarn
    # We cannot use the builtin cache because it errors out with the files
    # are not present.
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      shell: bash
      run: |
        CACHE_DIR=$(yarn config get cacheFolder)
        [[ "$CACHE_DIR" == "undefined" ]] && CACHE_DIR=$(yarn cache dir)
        echo "dir=$CACHE_DIR" >> $GITHUB_OUTPUT
    - name: Cache yarn
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ env.CACHE_PREFIX }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-yarn-${{ env.NODE_VERSION }}

    - name: Cache checked links
      if: ${{ matrix.group == 'link_check' }}
      uses: actions/cache@v3
      with:
        path: ~/.cache/pytest-link-check
        key: ${{ env.CACHE_PREFIX }}-linkcheck-${{ hashFiles('**/*.md', '**/*.rst') }}-links
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-linkcheck-

    - name: Cache conda
      uses: actions/cache@v3
      with:
        path: ~/conda_pkgs_dir
        key: ${{ env.CACHE_PREFIX  }}-conda-${{ env.CACHE_NUMBER }}-${{
          hashFiles('**/environment*.yml') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-conda-

    - name: Enable long paths on Windows
      if: startsWith(runner.os, 'Windows')
      run: Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem -Name LongPathsEnabled -Value 1
      shell: pwsh

    - name: Upgrade packaging dependencies
      shell: bash
      run: |
        set -eux
        echo "::group::Upgrade packaging dependencies"
        python -m pip install --upgrade pip
        if [ "$RUNNER_OS" != "Windows" ]; then
          pipx install hatch --python $(which python)
        else
          pipx install hatch
        fi
        echo "::endgroup::"

    - name: Handle dependency type
      shell: bash
      run: |
        set -eux
        if [ $DEPENDENCY_TYPE == 'pre' ]; then
          echo "PIP_PRE=1" >> $GITHUB_ENV
        elif [ $DEPENDENCY_TYPE == 'minimum' ]; then
          source ${{ github.action_path }}/setup_constraints.sh
        fi

    - name: Print Diagnostics
      shell: bash
      run: |
        set -eux
        echo "::group::env"
        env
        echo "::endgroup::"
        pip debug || true
        echo "::group::piplist"
        pip list || true
        echo "::endgroup::"
        yarn --version
        node --version
